{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"x-_bWKcnaqzF"},"outputs":[],"source":[]},{"cell_type":"code","source":["import findspark\n","from pyspark.ml.feature import VectorAssembler\n","findspark.init()\n","import numpy as np\n","import pandas as pd\n","\n","from pyspark.sql import SparkSession\n"],"metadata":{"id":"lwTGwggCSvtC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["spark = SparkSession.builder.appName(\"modelos\")\\\n","            .config(\"spark.driver.extraClassPath\", \"postgresql-42.2.14.jar\") \\\n","            .config(\"spark.executor.extraClassPath\", \"postgresql-42.2.14.jar\") \\\n","            .getOrCreate()\n","sc =  spark.sparkContext"],"metadata":{"id":"q4HbCpAnQQR2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["posgres_df = spark \\\n","    .read \\\n","    .format(\"jdbc\") \\\n","    .option(\"url\", \"jdbc:postgresql://host.docker.internal:5433/postgres\") \\\n","    .option(\"user\", \"postgres\") \\\n","    .option(\"password\", \"testPassword\") \\\n","    .option(\"dbtable\", \"proyecto\") \\\n","    .load()\n","posgres_df.show()"],"metadata":{"id":"YDTmkeOqHHDA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","feature_columns = [\"X{}\".format(i) for i in range(1, 17)]\n","\n","#ensamblar las características\n","assembler = VectorAssembler(inputCols=feature_columns, outputCol='scaled_features')\n","scaled_df = assembler.transform(posgres_df)\n","\n","#seleccionar solo las columnas \"features\" y \"Y\"\n","scaled_df = scaled_df.select(['scaled_features', 'Y'])\n","\n","scaled_df.show()\n"],"metadata":{"id":"_FozTeZOQGBS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Modelo de regresión logística"],"metadata":{"id":"qqBwBW9IQFYs"}},{"cell_type":"code","source":["from pyspark.sql import SparkSession\n","from pyspark.ml.tuning import ParamGridBuilder, CrossValidator\n","from pyspark.ml.evaluation import BinaryClassificationEvaluator\n","from pyspark.ml.classification import LogisticRegression\n","\n","\n","train_data, test_data = scaled_df.randomSplit([0.8, 0.2], seed=42)\n","\n","#modelo de regresión logística\n","LR = LogisticRegression(labelCol=\"Y\", featuresCol=\"scaled_features\", maxIter=100)\n","\n","#parámetros a probar\n","lr_param_grid = (ParamGridBuilder()\n","                 .addGrid(LR.regParam, [0.01, 0.1, 0.5, 1.0, 2.0])\n","                 .addGrid(LR.elasticNetParam, [0.0, 0.25, 0.5, 0.75, 1.0])\n","                 .build())\n","\n","#AUC como la métrica a evaluar\n","lr_evaluator = BinaryClassificationEvaluator(labelCol=\"Y\", metricName=\"areaUnderROC\")\n","\n","#validación cruzada con 10 folds\n","lr_cv = CrossValidator(estimator=LR,\n","                       estimatorParamMaps=lr_param_grid,\n","                       evaluator=lr_evaluator,\n","                       numFolds=10)\n","\n","#validaciones cruzadas\n","lr_cv_model = lr_cv.fit(train_data)\n","\n","#mejor modelo ajustado\n","best_LR_model = lr_cv_model.bestModel\n","\n","lr_predictions = best_LR_model.transform(test_data)\n","\n","#precisión de predicción del modelo elegido\n","evaluation_LR = lr_evaluator.evaluate(lr_predictions)\n","print(\"Precisión del mejor modelo: \", np.round(evaluation_LR, 4))\n","\n","#label y la probabilidad de predicción\n","lr_predictions.select(\"Y\", \"prediction\", \"probability\").show()\n","\n","lr_parameter_score = pd.DataFrame(np.round(lr_cv_model.avgMetrics, 4), columns=[\"AUC_mean\"]).reset_index(drop=False)\n","\n","parameters_auc_df = pd.DataFrame(list(enumerate(lr_cv_model.getEstimatorParamMaps()))).rename(columns={0: \"index\", 1: \"Parámetros\"})\n","parameters_auc_df = parameters_auc_df.join(lr_parameter_score.rename(columns={\"index\": \"Modelo\"}), on=\"index\").sort_values(\"AUC_mean\", ascending=False)\n","\n","#resultados de cada AUC\n","print(\"Resultados de AUC para cada modelo:\")\n","print(parameters_auc_df[[\"Modelo\", \"Parámetros\", \"AUC_mean\"]].to_string(index=False))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VNU9uOf65wjV","executionInfo":{"status":"ok","timestamp":1704690751039,"user_tz":360,"elapsed":209087,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}},"outputId":"241c2aa9-faf6-42b5-c8bd-56bbbfd552f4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Precisión del mejor modelo:  0.6828\n","+---+----------+--------------------+\n","|  Y|prediction|         probability|\n","+---+----------+--------------------+\n","|  1|       0.0|[0.91000484650486...|\n","|  0|       0.0|[0.96240746784907...|\n","|  0|       0.0|[0.92533511782051...|\n","|  0|       0.0|[0.93965338584649...|\n","|  1|       0.0|[0.87997619698691...|\n","|  0|       0.0|[0.94838101085623...|\n","|  0|       0.0|[0.94514021898476...|\n","|  0|       0.0|[0.86130450774356...|\n","|  0|       0.0|[0.90529903623953...|\n","|  0|       0.0|[0.90529903623953...|\n","|  0|       0.0|[0.91281648233858...|\n","|  0|       0.0|[0.92178940404386...|\n","|  0|       0.0|[0.83562887394577...|\n","|  0|       0.0|[0.81614462742402...|\n","|  0|       0.0|[0.94082141751007...|\n","|  0|       0.0|[0.95354155095557...|\n","|  0|       0.0|[0.91533607472952...|\n","|  0|       0.0|[0.94160143612375...|\n","|  0|       0.0|[0.86863945815550...|\n","|  0|       0.0|[0.93777569699547...|\n","+---+----------+--------------------+\n","only showing top 20 rows\n","\n","Resultados de AUC para cada modelo:\n"," Modelo                                                                                                Parámetros  AUC_mean\n","      2  {LogisticRegression_42c9b7dacf4b__regParam: 0.01, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.5}    0.6831\n","      1 {LogisticRegression_42c9b7dacf4b__regParam: 0.01, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.25}    0.6809\n","      3 {LogisticRegression_42c9b7dacf4b__regParam: 0.01, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.75}    0.6809\n","      4  {LogisticRegression_42c9b7dacf4b__regParam: 0.01, LogisticRegression_42c9b7dacf4b__elasticNetParam: 1.0}    0.6794\n","      0  {LogisticRegression_42c9b7dacf4b__regParam: 0.01, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.0}    0.6771\n","      5   {LogisticRegression_42c9b7dacf4b__regParam: 0.1, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.0}    0.6686\n","     10   {LogisticRegression_42c9b7dacf4b__regParam: 0.5, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.0}    0.6620\n","     15   {LogisticRegression_42c9b7dacf4b__regParam: 1.0, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.0}    0.6595\n","     20   {LogisticRegression_42c9b7dacf4b__regParam: 2.0, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.0}    0.6581\n","      6  {LogisticRegression_42c9b7dacf4b__regParam: 0.1, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.25}    0.6507\n","      7   {LogisticRegression_42c9b7dacf4b__regParam: 0.1, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.5}    0.5910\n","     19   {LogisticRegression_42c9b7dacf4b__regParam: 1.0, LogisticRegression_42c9b7dacf4b__elasticNetParam: 1.0}    0.5000\n","     23  {LogisticRegression_42c9b7dacf4b__regParam: 2.0, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.75}    0.5000\n","     21  {LogisticRegression_42c9b7dacf4b__regParam: 2.0, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.25}    0.5000\n","     22   {LogisticRegression_42c9b7dacf4b__regParam: 2.0, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.5}    0.5000\n","     17   {LogisticRegression_42c9b7dacf4b__regParam: 1.0, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.5}    0.5000\n","     18  {LogisticRegression_42c9b7dacf4b__regParam: 1.0, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.75}    0.5000\n","     12   {LogisticRegression_42c9b7dacf4b__regParam: 0.5, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.5}    0.5000\n","     16  {LogisticRegression_42c9b7dacf4b__regParam: 1.0, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.25}    0.5000\n","     14   {LogisticRegression_42c9b7dacf4b__regParam: 0.5, LogisticRegression_42c9b7dacf4b__elasticNetParam: 1.0}    0.5000\n","     13  {LogisticRegression_42c9b7dacf4b__regParam: 0.5, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.75}    0.5000\n","     11  {LogisticRegression_42c9b7dacf4b__regParam: 0.5, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.25}    0.5000\n","      9   {LogisticRegression_42c9b7dacf4b__regParam: 0.1, LogisticRegression_42c9b7dacf4b__elasticNetParam: 1.0}    0.5000\n","      8  {LogisticRegression_42c9b7dacf4b__regParam: 0.1, LogisticRegression_42c9b7dacf4b__elasticNetParam: 0.75}    0.5000\n","     24   {LogisticRegression_42c9b7dacf4b__regParam: 2.0, LogisticRegression_42c9b7dacf4b__elasticNetParam: 1.0}    0.5000\n"]}]},{"cell_type":"markdown","source":["Modelo Random Forest"],"metadata":{"id":"VRqDRHIjTO68"}},{"cell_type":"code","source":["from pyspark.ml.classification import RandomForestClassifier\n","from pyspark.ml.evaluation import BinaryClassificationEvaluator\n","from pyspark.ml.tuning import ParamGridBuilder, CrossValidator\n","from pyspark.ml import Pipeline\n","\n","#modelo Random Forest\n","rf = RandomForestClassifier(labelCol=\"Y\", featuresCol=\"scaled_features\")\n","\n","#AUC como métrica de evaluación\n","rfevaluator = BinaryClassificationEvaluator(labelCol=\"Y\", metricName=\"areaUnderROC\")\n","\n","#parámetros a probar\n","rfparamGrid = (ParamGridBuilder()\n","               .addGrid(rf.maxDepth, [2, 5, 7, 10, 12])\n","               .addGrid(rf.numTrees, [5, 10, 15, 20, 50])\n","               .build())\n","\n","#validación cruzada de 10 folds\n","rfcv = CrossValidator(estimator=rf,\n","                      estimatorParamMaps=rfparamGrid,\n","                      evaluator=rfevaluator,\n","                      numFolds=10)\n","\n","#validaciones cruzadas\n","rfcvModel = rfcv.fit(train_data)\n","\n","#parámetros de los modelos\n","parametros_RF = [\"depth 2 & trees 5\", \"depth 2 & trees 10\", \"depth 2 & trees 15\", \"depth 2 & trees 20\", \"depth 2 & trees 50\",\n","                  \"depth 5 & trees 5\", \"depth 5 & trees 10\", \"depth 5 & trees 15\", \"depth 5 & trees 20\", \"depth 5 & trees 50\",\n","                  \"depth 7 & trees 5\", \"depth 7 & trees 10\", \"depth 7 & trees 15\", \"depth 7 & trees 20\", \"depth 7 & trees 50\",\n","                  \"depth 10 & trees 5\", \"depth 10 & trees 10\", \"depth 10 & trees 15\", \"depth 10 & trees 20\", \"depth 10 & trees 50\",\n","                  \"depth 12 & trees 5\", \"depth 12 & trees 10\", \"depth 12 & trees 15\", \"depth 12 & trees 20\", \"depth 12 & trees 50\"]\n","\n","#join de los parámetros de los modelos con el promedio del AUC\n","parametros_RF_df = pd.DataFrame({\"Modelo\": [f\"Modelo {i+1}\" for i in range(len(parametros_RF))], \"Parámetros\": parametros_RF})\n","RF_auc = pd.DataFrame(np.round(rfcvModel.avgMetrics, 4), columns=[\"AUC\"])\n","parameters_auc_RF_df = pd.concat([parametros_RF_df, RF_auc], axis=1).sort_values(\"AUC\", ascending=False)\n","\n","print(parameters_auc_RF_df)\n","\n","#modelo ganador y se utilizan sus parámetros para entrenar el modelo que será probado después\n","best_model_params = parameters_auc_RF_df.iloc[0]\n","depth_and_trees = best_model_params[\"Parámetros\"].split(\" & \")\n","best_depth = int(depth_and_trees[0].split(\" \")[-1])\n","best_trees = int(depth_and_trees[1].split(\" \")[-1])\n","rf_best_model = RandomForestClassifier(labelCol=\"Y\", featuresCol=\"scaled_features\", maxDepth=best_depth, numTrees=best_trees)\n","rfModel = rf_best_model.fit(train_data)\n","\n","rf_predictions = rfModel.transform(test_data)\n","\n","#precision del mejor modelo\n","rf_evaluation = rfevaluator.evaluate(rf_predictions, {rfevaluator.metricName: 'areaUnderROC'})\n","print(\"Precisión del mejor modelo: {}\".format(rf_evaluation))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RW1iUNumQTCh","executionInfo":{"status":"ok","timestamp":1704688679108,"user_tz":360,"elapsed":360455,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}},"outputId":"b78e79fd-558c-4ee8-dc8e-ef5a3c44eac5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["       Modelo           Parámetros  AUC_mean\n","24  Modelo 25  depth 12 & trees 50    0.7846\n","19  Modelo 20  depth 10 & trees 50    0.7744\n","14  Modelo 15   depth 7 & trees 50    0.7691\n","21  Modelo 22  depth 12 & trees 10    0.7683\n","12  Modelo 13   depth 7 & trees 15    0.7635\n","22  Modelo 23  depth 12 & trees 15    0.7629\n","17  Modelo 18  depth 10 & trees 15    0.7590\n","16  Modelo 17  depth 10 & trees 10    0.7579\n","23  Modelo 24  depth 12 & trees 20    0.7548\n","18  Modelo 19  depth 10 & trees 20    0.7537\n","7    Modelo 8   depth 5 & trees 15    0.7476\n","13  Modelo 14   depth 7 & trees 20    0.7465\n","9   Modelo 10   depth 5 & trees 50    0.7454\n","11  Modelo 12   depth 7 & trees 10    0.7400\n","20  Modelo 21   depth 12 & trees 5    0.7262\n","8    Modelo 9   depth 5 & trees 20    0.7254\n","15  Modelo 16   depth 10 & trees 5    0.7230\n","6    Modelo 7   depth 5 & trees 10    0.7068\n","10  Modelo 11    depth 7 & trees 5    0.7003\n","2    Modelo 3   depth 2 & trees 15    0.6966\n","4    Modelo 5   depth 2 & trees 50    0.6928\n","5    Modelo 6    depth 5 & trees 5    0.6873\n","3    Modelo 4   depth 2 & trees 20    0.6572\n","0    Modelo 1    depth 2 & trees 5    0.6494\n","1    Modelo 2   depth 2 & trees 10    0.6240\n","Área bajo la curva ROC en el conjunto de prueba: 0.716947909024211\n"]}]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNNjbNBBSzg6J0ATbeRrTPu"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}