{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"x-_bWKcnaqzF","executionInfo":{"status":"ok","timestamp":1704756671574,"user_tz":360,"elapsed":6,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}}},"outputs":[],"source":[]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":62442,"status":"ok","timestamp":1704756734011,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"},"user_tz":360},"id":"oVFn0zVxCCO1","outputId":"070743e1-0d7c-44d1-ee57-108ca889c902"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pyspark\n","  Downloading pyspark-3.5.0.tar.gz (316.9 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m316.9/316.9 MB\u001b[0m \u001b[31m2.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: py4j==0.10.9.7 in /usr/local/lib/python3.10/dist-packages (from pyspark) (0.10.9.7)\n","Building wheels for collected packages: pyspark\n","  Building wheel for pyspark (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pyspark: filename=pyspark-3.5.0-py2.py3-none-any.whl size=317425345 sha256=061ffa6e69dd84b2873d617f9f585b82c653e088716caab11c5e73363706b38f\n","  Stored in directory: /root/.cache/pip/wheels/41/4e/10/c2cf2467f71c678cfc8a6b9ac9241e5e44a01940da8fbb17fc\n","Successfully built pyspark\n","Installing collected packages: pyspark\n","Successfully installed pyspark-3.5.0\n"]}],"source":["!pip install pyspark"]},{"cell_type":"markdown","metadata":{"id":"u9nNYvqIiGMj"},"source":["### **Credit card Approval Prediction**"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":45677,"status":"ok","timestamp":1704756779682,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"},"user_tz":360},"id":"2IZ2rwCdCxxU","outputId":"d4dca45c-7b45-4bde-d5ab-9122a7727288"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1548 entries, 0 to 1547\n","Data columns (total 18 columns):\n"," #   Column           Non-Null Count  Dtype  \n","---  ------           --------------  -----  \n"," 0   Ind_ID           1548 non-null   int64  \n"," 1   GENDER           1541 non-null   object \n"," 2   Car_Owner        1548 non-null   object \n"," 3   Propert_Owner    1548 non-null   object \n"," 4   CHILDREN         1548 non-null   int64  \n"," 5   Annual_income    1525 non-null   float64\n"," 6   Type_Income      1548 non-null   object \n"," 7   EDUCATION        1548 non-null   object \n"," 8   Marital_status   1548 non-null   object \n"," 9   Housing_type     1548 non-null   object \n"," 10  Birthday_count   1526 non-null   float64\n"," 11  Employed_days    1548 non-null   int64  \n"," 12  Mobile_phone     1548 non-null   int64  \n"," 13  Work_Phone       1548 non-null   int64  \n"," 14  Phone            1548 non-null   int64  \n"," 15  EMAIL_ID         1548 non-null   int64  \n"," 16  Type_Occupation  1060 non-null   object \n"," 17  Family_Members   1548 non-null   int64  \n","dtypes: float64(2), int64(8), object(8)\n","memory usage: 217.8+ KB\n"]}],"source":["from google.colab import drive\n","import pandas as pd\n","drive.mount('/content/drive')\n","archivo = '/content/drive/MyDrive/Colab Notebooks/Modulo 4. Big Data/Proyecto/data/Credit_card.csv'\n","df = pd.read_csv(archivo)\n","df.info()\n"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"G44dnwnNNVCb","executionInfo":{"status":"ok","timestamp":1704756779683,"user_tz":360,"elapsed":7,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}}},"outputs":[],"source":["#import findspark\n","#findspark.init()\n","\n","import pyspark\n","\n","from pyspark.sql import functions as f\n","from pyspark.sql import SparkSession, Window\n","from pyspark.sql.types import (StringType, IntegerType, FloatType, DecimalType, StructField, StructType)\n","\n"]},{"cell_type":"code","source":["df.describe().show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nPAB875tdUCS","executionInfo":{"status":"ok","timestamp":1704757485367,"user_tz":360,"elapsed":2315,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}},"outputId":"fc2c2dd9-3d28-42a4-909f-642a9fbfd919"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["+-------+------------------+------------------+------------+-------------------+-------------------+-------------------+------------------+---------------------+----------------------+-------------------+-------------------+-------------------+------------------+-------------------+--------------------+-------------------+-------------------+---------------------+\n","|summary|            Ind_ID|          CHILDREN|Mobile_phone|         Work_Phone|              Phone|           EMAIL_ID|    Family_Members|Annual_income_imputed|Birthday_count_imputed|       GENDER_index|    Car_Owner_index|Propert_Owner_index| Type_Income_index|    EDUCATION_index|Marital_status_index| Housing_type_index|Employed_days_index|Type_Occupation_index|\n","+-------+------------------+------------------+------------+-------------------+-------------------+-------------------+------------------+---------------------+----------------------+-------------------+-------------------+-------------------+------------------+-------------------+--------------------+-------------------+-------------------+---------------------+\n","|  count|              1548|              1548|        1548|               1548|               1548|               1548|              1548|                 1548|                  1548|               1548|               1548|               1548|              1548|               1548|                1548|               1548|               1548|                 1548|\n","|   mean| 5078920.351421189|0.4127906976744186|         1.0|0.20801033591731266| 0.3094315245478036|0.09237726098191215| 2.161498708010336|    191399.3262576712|    16040.342066880652| 0.3669250645994832|0.40310077519379844| 0.3475452196382429|0.8081395348837209|0.40891472868217055|  0.6569767441860465|0.20025839793281655|  314.8062015503876|    2.810077519379845|\n","| stddev|41717.587742233096|0.7766912834771467|         0.0| 0.4060154274970685|0.46240867631481936| 0.2896513425575124|0.9477716262844108|   112407.95131774183|     4199.321476683731|0.48212157947278983|0.49067919649340047|0.47634453794809445|0.9761266150574127| 0.6532485461551161|  1.1446326930699062| 0.6668432792222202|   302.919113902052|   3.3431386178504012|\n","|    min|           5008827|                 0|           1|                  0|                  0|                  0|                 1|              33750.0|                7705.0|                0.0|                0.0|                0.0|               0.0|                0.0|                 0.0|                0.0|                0.0|                  0.0|\n","|    max|           5150412|                14|           1|                  1|                  1|                  1|                15|            1575000.0|               24946.0|                1.0|                1.0|                1.0|               3.0|                4.0|                 4.0|                5.0|              955.0|                 18.0|\n","+-------+------------------+------------------+------------+-------------------+-------------------+-------------------+------------------+---------------------+----------------------+-------------------+-------------------+-------------------+------------------+-------------------+--------------------+-------------------+-------------------+---------------------+\n","\n"]}]},{"cell_type":"code","execution_count":4,"metadata":{"id":"2iw7UCILPGtt","executionInfo":{"status":"ok","timestamp":1704756779683,"user_tz":360,"elapsed":6,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}}},"outputs":[],"source":["# Crear una sesión de Spark\n","\n","def init_spark():\n","    spark = SparkSession.builder.appName(\"proyecto\")\\\n","                .config(\"spark.driver.extraClassPath\", \"postgresql-42.2.14.jar\") \\\n","                .config(\"spark.executor.extraClassPath\", \"postgresql-42.2.14.jar\") \\\n","                .getOrCreate()\n","    sc =  spark.sparkContext\n","    return spark, sc\n"]},{"cell_type":"code","source":["def start_df(spark, data_schema, path, header=False):\n","    return spark.read.csv(path, schema=data_schema, header=header) if path else None"],"metadata":{"id":"GeV5nYBIN1lE","executionInfo":{"status":"ok","timestamp":1704756779683,"user_tz":360,"elapsed":5,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","execution_count":6,"metadata":{"id":"89o2W66ESguj","executionInfo":{"status":"ok","timestamp":1704756779875,"user_tz":360,"elapsed":197,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}}},"outputs":[],"source":["#inicia un DataFrame Spark a partir de un CSV\n","\n","def create_df(spark, data_schema, path):\n","    if path:\n","        df = spark.read.csv(path, schema=data_schema)\n","        return df\n","    else:\n","        return None"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"woWjPidkSicO","executionInfo":{"status":"ok","timestamp":1704756779875,"user_tz":360,"elapsed":4,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}}},"outputs":[],"source":["#extrae el nombre del archivo (sin extensión) a partir de una ruta de archivo\n","\n","def get_file_name(file_path):\n","    file_name_without_extension, _ = os.path.splitext(\n","        os.path.basename(file_path))\n","    return file_name_without_extension"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"9b4fRcoBY8B1","executionInfo":{"status":"ok","timestamp":1704756779875,"user_tz":360,"elapsed":3,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}}},"outputs":[],"source":["#Crea y devuelve un esquema según el nombre del archivo\n","\n","def create_schema(file_name):\n","    data_schema = None\n","\n","    if file_name == \"Credit_card\":\n","        data_schema = StructType([\n","            StructField(\"Ind_ID\", IntegerType(), True),\n","            StructField(\"GENDER\", StringType(), True),\n","            StructField(\"Car_Owner\", StringType(), True),\n","            StructField(\"Propert_Owner\", StringType(), True),\n","            StructField(\"CHILDREN\", IntegerType(), True),\n","            StructField(\"Annual_income\", FloatType(), True),\n","            StructField(\"Type_Income\", StringType(), True),\n","            StructField(\"EDUCATION\", StringType(), True),\n","            StructField(\"Marital_status\", StringType(), True),\n","            StructField(\"Housing_type\", StringType(), True),\n","            StructField(\"Birthday_count\", FloatType(), True),\n","            StructField(\"Employed_days\", IntegerType(), True),\n","            StructField(\"Mobile_phone\", IntegerType(), True),\n","            StructField(\"Work_Phone\", IntegerType(), True),\n","            StructField(\"Phone\", IntegerType(), True),\n","            StructField(\"EMAIL_ID\", IntegerType(), True),\n","            StructField(\"Type_Occupation\", StringType(), True),\n","            StructField(\"Family_Members\", IntegerType(), True)\n","        ])\n","\n","    elif file_name == \"Credit_card_label\":\n","        data_schema = StructType([\n","            StructField(\"Ind_ID\", IntegerType(), True),\n","            StructField(\"label\", IntegerType(), True)\n","        ])\n","\n","    return data_schema\n","\n","data_schema1 = create_schema(\"Credit_card\")\n","data_schema2 = create_schema(\"Credit_card_label\")"]},{"cell_type":"markdown","source":["### **COLLAB**"],"metadata":{"id":"T8beqOmZT-Ta"}},{"cell_type":"code","source":["from pickle import TRUE\n","\n","spark, sc = init_spark()\n","\n","# Crea un df para COLLAB\n","\n","df = start_df(spark, data_schema1, \"/content/drive/MyDrive/Colab Notebooks/Modulo 4. Big Data/Proyecto/data/Credit_card.csv\", header=True)\n","df2 = start_df(spark, data_schema2, \"/content/drive/MyDrive/Colab Notebooks/Modulo 4. Big Data/Proyecto/data/Credit_card_label.csv\", header=True)\n","\n","# Iniciar la sesión de Spark\n","spark = SparkSession.builder.appName(\"proyecto\").getOrCreate()\n","\n"],"metadata":{"id":"F1YIenXtNfjk","executionInfo":{"status":"ok","timestamp":1704756800003,"user_tz":360,"elapsed":20131,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}}},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":["# **Funciones para reemplazar valores faltantes**"],"metadata":{"id":"FLcMqgpySGpm"}},{"cell_type":"code","source":["#funcion para reemplazar valores faltanes por el valor modal del atributo \"GENDER\", \"CHILDREN\", \"Mobile_phone\", \"Work_Phone\", \"Family_Members\"\n","\n","from pyspark.sql.functions import when\n","\n","def impute_with_most_common(df, column):\n","    most_common_value = df.groupBy(column).count().orderBy(\"count\", ascending=False).first()[0]\n","    return df.withColumn(column, when(df[column].isNull(), most_common_value).otherwise(df[column]))\n","\n","columns_to_impute = [\"GENDER\", \"CHILDREN\", \"Employed_days\", \"Mobile_phone\", \"Work_Phone\", \"Phone\", \"EMAIL_ID\", \"Family_Members\"]\n","\n","for column in columns_to_impute:\n","    df = impute_with_most_common(df, column)\n","\n","df.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r4L3sZyNSBbR","executionInfo":{"status":"ok","timestamp":1704756817323,"user_tz":360,"elapsed":17335,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}},"outputId":"65edd308-ea79-479f-a212-5663845bc7f2"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["+-------+------+---------+-------------+--------+-------------+--------------------+--------------------+--------------------+-----------------+--------------+-------------+------------+----------+-----+--------+---------------+--------------+\n","| Ind_ID|GENDER|Car_Owner|Propert_Owner|CHILDREN|Annual_income|         Type_Income|           EDUCATION|      Marital_status|     Housing_type|Birthday_count|Employed_days|Mobile_phone|Work_Phone|Phone|EMAIL_ID|Type_Occupation|Family_Members|\n","+-------+------+---------+-------------+--------+-------------+--------------------+--------------------+--------------------+-----------------+--------------+-------------+------------+----------+-----+--------+---------------+--------------+\n","|5008827|     M|        Y|            Y|       0|     180000.0|           Pensioner|    Higher education|             Married|House / apartment|      -18772.0|       365243|           1|         0|    0|       0|           NULL|             2|\n","|5009744|     F|        Y|            N|       0|     315000.0|Commercial associate|    Higher education|             Married|House / apartment|      -13557.0|         -586|           1|         1|    1|       0|           NULL|             2|\n","|5009746|     F|        Y|            N|       0|     315000.0|Commercial associate|    Higher education|             Married|House / apartment|          NULL|         -586|           1|         1|    1|       0|           NULL|             2|\n","|5009749|     F|        Y|            N|       0|         NULL|Commercial associate|    Higher education|             Married|House / apartment|      -13557.0|         -586|           1|         1|    1|       0|           NULL|             2|\n","|5009752|     F|        Y|            N|       0|     315000.0|Commercial associate|    Higher education|             Married|House / apartment|      -13557.0|         -586|           1|         1|    1|       0|           NULL|             2|\n","|5009753|     F|        Y|            N|       0|     315000.0|           Pensioner|    Higher education|             Married|House / apartment|      -13557.0|         -586|           1|         1|    1|       0|           NULL|             2|\n","|5009754|     F|        Y|            N|       0|     315000.0|Commercial associate|    Higher education|             Married|House / apartment|      -13557.0|         -586|           1|         1|    1|       0|           NULL|             2|\n","|5009894|     F|        N|            N|       0|     180000.0|           Pensioner|Secondary / secon...|             Married|House / apartment|      -22134.0|       365243|           1|         0|    0|       0|           NULL|             2|\n","|5010864|     M|        Y|            Y|       1|     450000.0|Commercial associate|Secondary / secon...|             Married|House / apartment|      -18173.0|         -678|           1|         0|    1|       1|     Core staff|             3|\n","|5010868|     M|        Y|            Y|       1|     450000.0|           Pensioner|Secondary / secon...|             Married|House / apartment|      -18173.0|         -678|           1|         0|    1|       1|     Core staff|             3|\n","|5010869|     M|        Y|            Y|       1|     450000.0|Commercial associate|Secondary / secon...|Single / not married|House / apartment|      -18173.0|         -678|           1|         0|    1|       1|     Core staff|             1|\n","|5018498|     F|        Y|            Y|       0|      90000.0|             Working|Secondary / secon...|             Married|House / apartment|      -18950.0|        -1002|           1|         1|    1|       0|  Cooking staff|             2|\n","|5018501|     F|        Y|            Y|       0|         NULL|             Working|Secondary / secon...|             Married|House / apartment|      -18950.0|        -1002|           1|         1|    1|       0|  Cooking staff|             2|\n","|5018503|     F|        Y|            Y|       0|      90000.0|             Working|Secondary / secon...|             Married|House / apartment|      -18950.0|        -1002|           1|         1|    1|       0|  Cooking staff|             2|\n","|5021303|     M|        N|            N|       1|     472500.0|           Pensioner|    Higher education|             Married|     With parents|       -8907.0|         -913|           1|         0|    0|       1|           NULL|             3|\n","|5021310|     M|        N|            Y|       0|     270000.0|             Working|Secondary / secon...|             Married|House / apartment|      -16896.0|         -248|           1|         0|    0|       0|       Laborers|             2|\n","|5021314|     M|        N|            Y|       0|     270000.0|             Working|Secondary / secon...|Single / not married|House / apartment|      -16896.0|         -248|           1|         0|    0|       0|       Laborers|             2|\n","|5021430|     F|        N|            Y|       0|     126000.0|Commercial associate|    Higher education|Single / not married|House / apartment|      -18907.0|        -2470|           1|         0|    0|       0|    Sales staff|             1|\n","|5021431|     F|        N|            Y|       0|     126000.0|Commercial associate|    Higher education|Single / not married|House / apartment|      -18907.0|        -2470|           1|         0|    0|       0|    Sales staff|             1|\n","|5021998|     M|        N|            Y|       0|      90000.0|           Pensioner|Secondary / secon...|             Married|House / apartment|      -18863.0|        -1644|           1|         0|    0|       1|           NULL|             2|\n","+-------+------+---------+-------------+--------+-------------+--------------------+--------------------+--------------------+-----------------+--------------+-------------+------------+----------+-----+--------+---------------+--------------+\n","only showing top 20 rows\n","\n"]}]},{"cell_type":"code","source":["#funcion para reemplazar valores faltanes por el nuevo valor \"Unknown\" del atributo\n","\n","def handle_missing_categorical_columns(df, columns):\n","    for column in columns:\n","        df = df.withColumn(column, when(df[column].isNull(), \"Unknown\").otherwise(df[column]))\n","    return df\n","\n","df = handle_missing_categorical_columns(df, [\"Car_Owner\", \"Propert_Owner\", \"Type_Income\", \"EDUCATION\", \"Marital_status\", \"Housing_type\", \"Type_Occupation\"])\n","\n","df.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nngie3cLUaou","executionInfo":{"status":"ok","timestamp":1704756817941,"user_tz":360,"elapsed":648,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}},"outputId":"c91467ab-4ff0-4ab4-c0bd-c7deaa0707ba"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["+-------+------+---------+-------------+--------+-------------+--------------------+--------------------+--------------------+-----------------+--------------+-------------+------------+----------+-----+--------+---------------+--------------+\n","| Ind_ID|GENDER|Car_Owner|Propert_Owner|CHILDREN|Annual_income|         Type_Income|           EDUCATION|      Marital_status|     Housing_type|Birthday_count|Employed_days|Mobile_phone|Work_Phone|Phone|EMAIL_ID|Type_Occupation|Family_Members|\n","+-------+------+---------+-------------+--------+-------------+--------------------+--------------------+--------------------+-----------------+--------------+-------------+------------+----------+-----+--------+---------------+--------------+\n","|5008827|     M|        Y|            Y|       0|     180000.0|           Pensioner|    Higher education|             Married|House / apartment|      -18772.0|       365243|           1|         0|    0|       0|        Unknown|             2|\n","|5009744|     F|        Y|            N|       0|     315000.0|Commercial associate|    Higher education|             Married|House / apartment|      -13557.0|         -586|           1|         1|    1|       0|        Unknown|             2|\n","|5009746|     F|        Y|            N|       0|     315000.0|Commercial associate|    Higher education|             Married|House / apartment|          NULL|         -586|           1|         1|    1|       0|        Unknown|             2|\n","|5009749|     F|        Y|            N|       0|         NULL|Commercial associate|    Higher education|             Married|House / apartment|      -13557.0|         -586|           1|         1|    1|       0|        Unknown|             2|\n","|5009752|     F|        Y|            N|       0|     315000.0|Commercial associate|    Higher education|             Married|House / apartment|      -13557.0|         -586|           1|         1|    1|       0|        Unknown|             2|\n","|5009753|     F|        Y|            N|       0|     315000.0|           Pensioner|    Higher education|             Married|House / apartment|      -13557.0|         -586|           1|         1|    1|       0|        Unknown|             2|\n","|5009754|     F|        Y|            N|       0|     315000.0|Commercial associate|    Higher education|             Married|House / apartment|      -13557.0|         -586|           1|         1|    1|       0|        Unknown|             2|\n","|5009894|     F|        N|            N|       0|     180000.0|           Pensioner|Secondary / secon...|             Married|House / apartment|      -22134.0|       365243|           1|         0|    0|       0|        Unknown|             2|\n","|5010864|     M|        Y|            Y|       1|     450000.0|Commercial associate|Secondary / secon...|             Married|House / apartment|      -18173.0|         -678|           1|         0|    1|       1|     Core staff|             3|\n","|5010868|     M|        Y|            Y|       1|     450000.0|           Pensioner|Secondary / secon...|             Married|House / apartment|      -18173.0|         -678|           1|         0|    1|       1|     Core staff|             3|\n","|5010869|     M|        Y|            Y|       1|     450000.0|Commercial associate|Secondary / secon...|Single / not married|House / apartment|      -18173.0|         -678|           1|         0|    1|       1|     Core staff|             1|\n","|5018498|     F|        Y|            Y|       0|      90000.0|             Working|Secondary / secon...|             Married|House / apartment|      -18950.0|        -1002|           1|         1|    1|       0|  Cooking staff|             2|\n","|5018501|     F|        Y|            Y|       0|         NULL|             Working|Secondary / secon...|             Married|House / apartment|      -18950.0|        -1002|           1|         1|    1|       0|  Cooking staff|             2|\n","|5018503|     F|        Y|            Y|       0|      90000.0|             Working|Secondary / secon...|             Married|House / apartment|      -18950.0|        -1002|           1|         1|    1|       0|  Cooking staff|             2|\n","|5021303|     M|        N|            N|       1|     472500.0|           Pensioner|    Higher education|             Married|     With parents|       -8907.0|         -913|           1|         0|    0|       1|        Unknown|             3|\n","|5021310|     M|        N|            Y|       0|     270000.0|             Working|Secondary / secon...|             Married|House / apartment|      -16896.0|         -248|           1|         0|    0|       0|       Laborers|             2|\n","|5021314|     M|        N|            Y|       0|     270000.0|             Working|Secondary / secon...|Single / not married|House / apartment|      -16896.0|         -248|           1|         0|    0|       0|       Laborers|             2|\n","|5021430|     F|        N|            Y|       0|     126000.0|Commercial associate|    Higher education|Single / not married|House / apartment|      -18907.0|        -2470|           1|         0|    0|       0|    Sales staff|             1|\n","|5021431|     F|        N|            Y|       0|     126000.0|Commercial associate|    Higher education|Single / not married|House / apartment|      -18907.0|        -2470|           1|         0|    0|       0|    Sales staff|             1|\n","|5021998|     M|        N|            Y|       0|      90000.0|           Pensioner|Secondary / secon...|             Married|House / apartment|      -18863.0|        -1644|           1|         0|    0|       1|        Unknown|             2|\n","+-------+------+---------+-------------+--------+-------------+--------------------+--------------------+--------------------+-----------------+--------------+-------------+------------+----------+-----+--------+---------------+--------------+\n","only showing top 20 rows\n","\n"]}]},{"cell_type":"code","source":["#funcion para reemplazar valores faltanes por el valor promedio del atributo\n","\n","from pyspark.ml.feature import Imputer\n","\n","def impute_abs_negative_values(df, columns):\n","    for column in columns:\n","        # Tomar el valor absoluto directamente en la columna existente\n","        df = df.withColumn(column, f.abs(df[column]))\n","\n","        # Imputar valores faltantes directamente en la columna existente\n","        imputer = Imputer(inputCols=[column], outputCols=[f\"{column}_imputed\"], strategy=\"mean\")\n","        df = imputer.fit(df).transform(df)\n","\n","        df = df.drop(column)\n","\n","    return df\n","\n","# Ejemplo de uso\n","df = impute_abs_negative_values(df, columns=[\"Annual_income\",\"Birthday_count\"])\n","df.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RjFvCgRCat2h","executionInfo":{"status":"ok","timestamp":1704756820614,"user_tz":360,"elapsed":2678,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}},"outputId":"95bb26a1-e3c5-4f62-b2f6-f8bed035a2ef"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["+-------+------+---------+-------------+--------+--------------------+--------------------+--------------------+-----------------+-------------+------------+----------+-----+--------+---------------+--------------+---------------------+----------------------+\n","| Ind_ID|GENDER|Car_Owner|Propert_Owner|CHILDREN|         Type_Income|           EDUCATION|      Marital_status|     Housing_type|Employed_days|Mobile_phone|Work_Phone|Phone|EMAIL_ID|Type_Occupation|Family_Members|Annual_income_imputed|Birthday_count_imputed|\n","+-------+------+---------+-------------+--------+--------------------+--------------------+--------------------+-----------------+-------------+------------+----------+-----+--------+---------------+--------------+---------------------+----------------------+\n","|5008827|     M|        Y|            Y|       0|           Pensioner|    Higher education|             Married|House / apartment|       365243|           1|         0|    0|       0|        Unknown|             2|             180000.0|               18772.0|\n","|5009744|     F|        Y|            N|       0|Commercial associate|    Higher education|             Married|House / apartment|         -586|           1|         1|    1|       0|        Unknown|             2|             315000.0|               13557.0|\n","|5009746|     F|        Y|            N|       0|Commercial associate|    Higher education|             Married|House / apartment|         -586|           1|         1|    1|       0|        Unknown|             2|             315000.0|             16040.342|\n","|5009749|     F|        Y|            N|       0|Commercial associate|    Higher education|             Married|House / apartment|         -586|           1|         1|    1|       0|        Unknown|             2|            191399.33|               13557.0|\n","|5009752|     F|        Y|            N|       0|Commercial associate|    Higher education|             Married|House / apartment|         -586|           1|         1|    1|       0|        Unknown|             2|             315000.0|               13557.0|\n","|5009753|     F|        Y|            N|       0|           Pensioner|    Higher education|             Married|House / apartment|         -586|           1|         1|    1|       0|        Unknown|             2|             315000.0|               13557.0|\n","|5009754|     F|        Y|            N|       0|Commercial associate|    Higher education|             Married|House / apartment|         -586|           1|         1|    1|       0|        Unknown|             2|             315000.0|               13557.0|\n","|5009894|     F|        N|            N|       0|           Pensioner|Secondary / secon...|             Married|House / apartment|       365243|           1|         0|    0|       0|        Unknown|             2|             180000.0|               22134.0|\n","|5010864|     M|        Y|            Y|       1|Commercial associate|Secondary / secon...|             Married|House / apartment|         -678|           1|         0|    1|       1|     Core staff|             3|             450000.0|               18173.0|\n","|5010868|     M|        Y|            Y|       1|           Pensioner|Secondary / secon...|             Married|House / apartment|         -678|           1|         0|    1|       1|     Core staff|             3|             450000.0|               18173.0|\n","|5010869|     M|        Y|            Y|       1|Commercial associate|Secondary / secon...|Single / not married|House / apartment|         -678|           1|         0|    1|       1|     Core staff|             1|             450000.0|               18173.0|\n","|5018498|     F|        Y|            Y|       0|             Working|Secondary / secon...|             Married|House / apartment|        -1002|           1|         1|    1|       0|  Cooking staff|             2|              90000.0|               18950.0|\n","|5018501|     F|        Y|            Y|       0|             Working|Secondary / secon...|             Married|House / apartment|        -1002|           1|         1|    1|       0|  Cooking staff|             2|            191399.33|               18950.0|\n","|5018503|     F|        Y|            Y|       0|             Working|Secondary / secon...|             Married|House / apartment|        -1002|           1|         1|    1|       0|  Cooking staff|             2|              90000.0|               18950.0|\n","|5021303|     M|        N|            N|       1|           Pensioner|    Higher education|             Married|     With parents|         -913|           1|         0|    0|       1|        Unknown|             3|             472500.0|                8907.0|\n","|5021310|     M|        N|            Y|       0|             Working|Secondary / secon...|             Married|House / apartment|         -248|           1|         0|    0|       0|       Laborers|             2|             270000.0|               16896.0|\n","|5021314|     M|        N|            Y|       0|             Working|Secondary / secon...|Single / not married|House / apartment|         -248|           1|         0|    0|       0|       Laborers|             2|             270000.0|               16896.0|\n","|5021430|     F|        N|            Y|       0|Commercial associate|    Higher education|Single / not married|House / apartment|        -2470|           1|         0|    0|       0|    Sales staff|             1|             126000.0|               18907.0|\n","|5021431|     F|        N|            Y|       0|Commercial associate|    Higher education|Single / not married|House / apartment|        -2470|           1|         0|    0|       0|    Sales staff|             1|             126000.0|               18907.0|\n","|5021998|     M|        N|            Y|       0|           Pensioner|Secondary / secon...|             Married|House / apartment|        -1644|           1|         0|    0|       1|        Unknown|             2|              90000.0|               18863.0|\n","+-------+------+---------+-------------+--------+--------------------+--------------------+--------------------+-----------------+-------------+------------+----------+-----+--------+---------------+--------------+---------------------+----------------------+\n","only showing top 20 rows\n","\n"]}]},{"cell_type":"markdown","source":["# **Funciones para transformaciones de los datos**"],"metadata":{"id":"wnvb7iDldJGQ"}},{"cell_type":"code","execution_count":13,"metadata":{"id":"mi8MLTqmbXXn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1704756829804,"user_tz":360,"elapsed":9193,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}},"outputId":"cf71c68b-991d-4b72-b4eb-4e388249d4cd"},"outputs":[{"output_type":"stream","name":"stdout","text":["+-------+--------+------------+----------+-----+--------+--------------+---------------------+----------------------+------------+---------------+-------------------+-----------------+---------------+--------------------+------------------+-------------------+---------------------+\n","| Ind_ID|CHILDREN|Mobile_phone|Work_Phone|Phone|EMAIL_ID|Family_Members|Annual_income_imputed|Birthday_count_imputed|GENDER_index|Car_Owner_index|Propert_Owner_index|Type_Income_index|EDUCATION_index|Marital_status_index|Housing_type_index|Employed_days_index|Type_Occupation_index|\n","+-------+--------+------------+----------+-----+--------+--------------+---------------------+----------------------+------------+---------------+-------------------+-----------------+---------------+--------------------+------------------+-------------------+---------------------+\n","|5008827|       0|           1|         0|    0|       0|             2|             180000.0|               18772.0|         1.0|            1.0|                0.0|              2.0|            1.0|                 0.0|               0.0|                0.0|                  0.0|\n","|5009744|       0|           1|         1|    1|       0|             2|             315000.0|               13557.0|         0.0|            1.0|                1.0|              1.0|            1.0|                 0.0|               0.0|                1.0|                  0.0|\n","|5009746|       0|           1|         1|    1|       0|             2|             315000.0|             16040.342|         0.0|            1.0|                1.0|              1.0|            1.0|                 0.0|               0.0|                1.0|                  0.0|\n","|5009749|       0|           1|         1|    1|       0|             2|            191399.33|               13557.0|         0.0|            1.0|                1.0|              1.0|            1.0|                 0.0|               0.0|                1.0|                  0.0|\n","|5009752|       0|           1|         1|    1|       0|             2|             315000.0|               13557.0|         0.0|            1.0|                1.0|              1.0|            1.0|                 0.0|               0.0|                1.0|                  0.0|\n","|5009753|       0|           1|         1|    1|       0|             2|             315000.0|               13557.0|         0.0|            1.0|                1.0|              2.0|            1.0|                 0.0|               0.0|                1.0|                  0.0|\n","|5009754|       0|           1|         1|    1|       0|             2|             315000.0|               13557.0|         0.0|            1.0|                1.0|              1.0|            1.0|                 0.0|               0.0|                1.0|                  0.0|\n","|5009894|       0|           1|         0|    0|       0|             2|             180000.0|               22134.0|         0.0|            0.0|                1.0|              2.0|            0.0|                 0.0|               0.0|                0.0|                  0.0|\n","|5010864|       1|           1|         0|    1|       1|             3|             450000.0|               18173.0|         1.0|            1.0|                0.0|              1.0|            0.0|                 0.0|               0.0|               17.0|                  2.0|\n","|5010868|       1|           1|         0|    1|       1|             3|             450000.0|               18173.0|         1.0|            1.0|                0.0|              2.0|            0.0|                 0.0|               0.0|               17.0|                  2.0|\n","|5010869|       1|           1|         0|    1|       1|             1|             450000.0|               18173.0|         1.0|            1.0|                0.0|              1.0|            0.0|                 1.0|               0.0|               17.0|                  2.0|\n","|5018498|       0|           1|         1|    1|       0|             2|              90000.0|               18950.0|         0.0|            1.0|                0.0|              0.0|            0.0|                 0.0|               0.0|               21.0|                 11.0|\n","|5018501|       0|           1|         1|    1|       0|             2|            191399.33|               18950.0|         0.0|            1.0|                0.0|              0.0|            0.0|                 0.0|               0.0|               21.0|                 11.0|\n","|5018503|       0|           1|         1|    1|       0|             2|              90000.0|               18950.0|         0.0|            1.0|                0.0|              0.0|            0.0|                 0.0|               0.0|               21.0|                 11.0|\n","|5021303|       1|           1|         0|    0|       1|             3|             472500.0|                8907.0|         1.0|            0.0|                1.0|              2.0|            1.0|                 0.0|               1.0|              938.0|                  0.0|\n","|5021310|       0|           1|         0|    0|       0|             2|             270000.0|               16896.0|         1.0|            0.0|                0.0|              0.0|            0.0|                 0.0|               0.0|              141.0|                  1.0|\n","|5021314|       0|           1|         0|    0|       0|             2|             270000.0|               16896.0|         1.0|            0.0|                0.0|              0.0|            0.0|                 1.0|               0.0|              141.0|                  1.0|\n","|5021430|       0|           1|         0|    0|       0|             1|             126000.0|               18907.0|         0.0|            0.0|                0.0|              1.0|            1.0|                 1.0|               0.0|              138.0|                  4.0|\n","|5021431|       0|           1|         0|    0|       0|             1|             126000.0|               18907.0|         0.0|            0.0|                0.0|              1.0|            1.0|                 1.0|               0.0|              138.0|                  4.0|\n","|5021998|       0|           1|         0|    0|       1|             2|              90000.0|               18863.0|         1.0|            0.0|                0.0|              2.0|            0.0|                 0.0|               0.0|              376.0|                  0.0|\n","+-------+--------+------------+----------+-----+--------+--------------+---------------------+----------------------+------------+---------------+-------------------+-----------------+---------------+--------------------+------------------+-------------------+---------------------+\n","only showing top 20 rows\n","\n"]}],"source":["#asignar valores numéricos a las variables categóricas\n","\n","from pyspark.ml.feature import StringIndexer\n","\n","def string_indexer_transform(df, columns):\n","    for column in columns:\n","        indexer = StringIndexer(inputCol=column, outputCol=f\"{column}_index\")\n","        df = indexer.fit(df).transform(df)\n","\n","        df = df.drop(column)\n","\n","    return df\n","\n","# Ejemplo de uso\n","categorical_columns = [\n","    \"GENDER\", \"Car_Owner\", \"Propert_Owner\", \"Type_Income\",\n","    \"EDUCATION\", \"Marital_status\", \"Housing_type\",\n","    \"Employed_days\", \"Type_Occupation\"\n","]\n","\n","df = string_indexer_transform(df, categorical_columns)\n","df.show()\n","\n"]},{"cell_type":"code","source":["#union de los dataframes\n","\n","def inner_join(df_1, df_2, join_type='inner'):\n","    df_joined = df.join(df2, df.Ind_ID == df2.Ind_ID, join_type)\n","    df_joined = df_joined.drop(df2.Ind_ID)\n","    return df_joined\n","\n","df_joined = inner_join(df, df2, join_type='inner')\n","\n","df_joined.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p81dldFwoqnI","executionInfo":{"status":"ok","timestamp":1704756831516,"user_tz":360,"elapsed":1728,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}},"outputId":"07840dc5-251f-4c69-a838-5081dfa67dad"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["+-------+--------+------------+----------+-----+--------+--------------+---------------------+----------------------+------------+---------------+-------------------+-----------------+---------------+--------------------+------------------+-------------------+---------------------+-----+\n","| Ind_ID|CHILDREN|Mobile_phone|Work_Phone|Phone|EMAIL_ID|Family_Members|Annual_income_imputed|Birthday_count_imputed|GENDER_index|Car_Owner_index|Propert_Owner_index|Type_Income_index|EDUCATION_index|Marital_status_index|Housing_type_index|Employed_days_index|Type_Occupation_index|label|\n","+-------+--------+------------+----------+-----+--------+--------------+---------------------+----------------------+------------+---------------+-------------------+-----------------+---------------+--------------------+------------------+-------------------+---------------------+-----+\n","|5008827|       0|           1|         0|    0|       0|             2|             180000.0|               18772.0|         1.0|            1.0|                0.0|              2.0|            1.0|                 0.0|               0.0|                0.0|                  0.0|    1|\n","|5009744|       0|           1|         1|    1|       0|             2|             315000.0|               13557.0|         0.0|            1.0|                1.0|              1.0|            1.0|                 0.0|               0.0|                1.0|                  0.0|    1|\n","|5009746|       0|           1|         1|    1|       0|             2|             315000.0|             16040.342|         0.0|            1.0|                1.0|              1.0|            1.0|                 0.0|               0.0|                1.0|                  0.0|    1|\n","|5009749|       0|           1|         1|    1|       0|             2|            191399.33|               13557.0|         0.0|            1.0|                1.0|              1.0|            1.0|                 0.0|               0.0|                1.0|                  0.0|    1|\n","|5009752|       0|           1|         1|    1|       0|             2|             315000.0|               13557.0|         0.0|            1.0|                1.0|              1.0|            1.0|                 0.0|               0.0|                1.0|                  0.0|    1|\n","|5009753|       0|           1|         1|    1|       0|             2|             315000.0|               13557.0|         0.0|            1.0|                1.0|              2.0|            1.0|                 0.0|               0.0|                1.0|                  0.0|    1|\n","|5009754|       0|           1|         1|    1|       0|             2|             315000.0|               13557.0|         0.0|            1.0|                1.0|              1.0|            1.0|                 0.0|               0.0|                1.0|                  0.0|    1|\n","|5009894|       0|           1|         0|    0|       0|             2|             180000.0|               22134.0|         0.0|            0.0|                1.0|              2.0|            0.0|                 0.0|               0.0|                0.0|                  0.0|    1|\n","|5010864|       1|           1|         0|    1|       1|             3|             450000.0|               18173.0|         1.0|            1.0|                0.0|              1.0|            0.0|                 0.0|               0.0|               17.0|                  2.0|    1|\n","|5010868|       1|           1|         0|    1|       1|             3|             450000.0|               18173.0|         1.0|            1.0|                0.0|              2.0|            0.0|                 0.0|               0.0|               17.0|                  2.0|    1|\n","|5010869|       1|           1|         0|    1|       1|             1|             450000.0|               18173.0|         1.0|            1.0|                0.0|              1.0|            0.0|                 1.0|               0.0|               17.0|                  2.0|    1|\n","|5018498|       0|           1|         1|    1|       0|             2|              90000.0|               18950.0|         0.0|            1.0|                0.0|              0.0|            0.0|                 0.0|               0.0|               21.0|                 11.0|    1|\n","|5018501|       0|           1|         1|    1|       0|             2|            191399.33|               18950.0|         0.0|            1.0|                0.0|              0.0|            0.0|                 0.0|               0.0|               21.0|                 11.0|    1|\n","|5018503|       0|           1|         1|    1|       0|             2|              90000.0|               18950.0|         0.0|            1.0|                0.0|              0.0|            0.0|                 0.0|               0.0|               21.0|                 11.0|    1|\n","|5021303|       1|           1|         0|    0|       1|             3|             472500.0|                8907.0|         1.0|            0.0|                1.0|              2.0|            1.0|                 0.0|               1.0|              938.0|                  0.0|    1|\n","|5021310|       0|           1|         0|    0|       0|             2|             270000.0|               16896.0|         1.0|            0.0|                0.0|              0.0|            0.0|                 0.0|               0.0|              141.0|                  1.0|    1|\n","|5021314|       0|           1|         0|    0|       0|             2|             270000.0|               16896.0|         1.0|            0.0|                0.0|              0.0|            0.0|                 1.0|               0.0|              141.0|                  1.0|    1|\n","|5021430|       0|           1|         0|    0|       0|             1|             126000.0|               18907.0|         0.0|            0.0|                0.0|              1.0|            1.0|                 1.0|               0.0|              138.0|                  4.0|    1|\n","|5021431|       0|           1|         0|    0|       0|             1|             126000.0|               18907.0|         0.0|            0.0|                0.0|              1.0|            1.0|                 1.0|               0.0|              138.0|                  4.0|    1|\n","|5021998|       0|           1|         0|    0|       1|             2|              90000.0|               18863.0|         1.0|            0.0|                0.0|              2.0|            0.0|                 0.0|               0.0|              376.0|                  0.0|    1|\n","+-------+--------+------------+----------+-----+--------+--------------+---------------------+----------------------+------------+---------------+-------------------+-----------------+---------------+--------------------+------------------+-------------------+---------------------+-----+\n","only showing top 20 rows\n","\n"]}]},{"cell_type":"code","source":["#se cambia el nombre de las columnas\n","\n","def nombre_columnas(df):\n","\n","    df_renamed = df \\\n","        .withColumnRenamed(\"Ind_ID\", \"ID\") \\\n","        .withColumnRenamed(\"CHILDREN\", \"X1\") \\\n","        .withColumnRenamed(\"Mobile_phone\", \"X2\") \\\n","        .withColumnRenamed(\"Work_Phone\", \"X3\") \\\n","        .withColumnRenamed(\"Phone\", \"X4\") \\\n","        .withColumnRenamed(\"EMAIL_ID\", \"X5\") \\\n","        .withColumnRenamed(\"Family_Members\", \"X6\") \\\n","        .withColumnRenamed(\"Annual_income_imputed\", \"X7\") \\\n","        .withColumnRenamed(\"Birthday_count_imputed\", \"X8\") \\\n","        .withColumnRenamed(\"GENDER_index\", \"X9\") \\\n","        .withColumnRenamed(\"Car_Owner_index\", \"X10\") \\\n","        .withColumnRenamed(\"Propert_Owner_index\", \"X11\") \\\n","        .withColumnRenamed(\"Type_Income_index\", \"X12\") \\\n","        .withColumnRenamed(\"EDUCATION_index\", \"X13\") \\\n","        .withColumnRenamed(\"Marital_status_index\", \"X14\") \\\n","        .withColumnRenamed(\"Housing_type_index\", \"X15\") \\\n","        .withColumnRenamed(\"Employed_days_index\", \"X16\") \\\n","        .withColumnRenamed(\"Type_Occupation_index\", \"X17\") \\\n","        .withColumnRenamed(\"label\", \"Y\")\n","\n","    return df_renamed\n","\n","# Ejemplo de uso\n","df_joined = nombre_columnas(df_joined)\n","df_joined.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nzvniPIBumXb","executionInfo":{"status":"ok","timestamp":1704756832717,"user_tz":360,"elapsed":1205,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}},"outputId":"e0a2f89d-972f-4506-ea60-26a23d9eadfb"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["+-------+---+---+---+---+---+---+---------+---------+---+---+---+---+---+---+---+-----+----+---+\n","|     ID| X1| X2| X3| X4| X5| X6|       X7|       X8| X9|X10|X11|X12|X13|X14|X15|  X16| X17|  Y|\n","+-------+---+---+---+---+---+---+---------+---------+---+---+---+---+---+---+---+-----+----+---+\n","|5008827|  0|  1|  0|  0|  0|  2| 180000.0|  18772.0|1.0|1.0|0.0|2.0|1.0|0.0|0.0|  0.0| 0.0|  1|\n","|5009744|  0|  1|  1|  1|  0|  2| 315000.0|  13557.0|0.0|1.0|1.0|1.0|1.0|0.0|0.0|  1.0| 0.0|  1|\n","|5009746|  0|  1|  1|  1|  0|  2| 315000.0|16040.342|0.0|1.0|1.0|1.0|1.0|0.0|0.0|  1.0| 0.0|  1|\n","|5009749|  0|  1|  1|  1|  0|  2|191399.33|  13557.0|0.0|1.0|1.0|1.0|1.0|0.0|0.0|  1.0| 0.0|  1|\n","|5009752|  0|  1|  1|  1|  0|  2| 315000.0|  13557.0|0.0|1.0|1.0|1.0|1.0|0.0|0.0|  1.0| 0.0|  1|\n","|5009753|  0|  1|  1|  1|  0|  2| 315000.0|  13557.0|0.0|1.0|1.0|2.0|1.0|0.0|0.0|  1.0| 0.0|  1|\n","|5009754|  0|  1|  1|  1|  0|  2| 315000.0|  13557.0|0.0|1.0|1.0|1.0|1.0|0.0|0.0|  1.0| 0.0|  1|\n","|5009894|  0|  1|  0|  0|  0|  2| 180000.0|  22134.0|0.0|0.0|1.0|2.0|0.0|0.0|0.0|  0.0| 0.0|  1|\n","|5010864|  1|  1|  0|  1|  1|  3| 450000.0|  18173.0|1.0|1.0|0.0|1.0|0.0|0.0|0.0| 17.0| 2.0|  1|\n","|5010868|  1|  1|  0|  1|  1|  3| 450000.0|  18173.0|1.0|1.0|0.0|2.0|0.0|0.0|0.0| 17.0| 2.0|  1|\n","|5010869|  1|  1|  0|  1|  1|  1| 450000.0|  18173.0|1.0|1.0|0.0|1.0|0.0|1.0|0.0| 17.0| 2.0|  1|\n","|5018498|  0|  1|  1|  1|  0|  2|  90000.0|  18950.0|0.0|1.0|0.0|0.0|0.0|0.0|0.0| 21.0|11.0|  1|\n","|5018501|  0|  1|  1|  1|  0|  2|191399.33|  18950.0|0.0|1.0|0.0|0.0|0.0|0.0|0.0| 21.0|11.0|  1|\n","|5018503|  0|  1|  1|  1|  0|  2|  90000.0|  18950.0|0.0|1.0|0.0|0.0|0.0|0.0|0.0| 21.0|11.0|  1|\n","|5021303|  1|  1|  0|  0|  1|  3| 472500.0|   8907.0|1.0|0.0|1.0|2.0|1.0|0.0|1.0|938.0| 0.0|  1|\n","|5021310|  0|  1|  0|  0|  0|  2| 270000.0|  16896.0|1.0|0.0|0.0|0.0|0.0|0.0|0.0|141.0| 1.0|  1|\n","|5021314|  0|  1|  0|  0|  0|  2| 270000.0|  16896.0|1.0|0.0|0.0|0.0|0.0|1.0|0.0|141.0| 1.0|  1|\n","|5021430|  0|  1|  0|  0|  0|  1| 126000.0|  18907.0|0.0|0.0|0.0|1.0|1.0|1.0|0.0|138.0| 4.0|  1|\n","|5021431|  0|  1|  0|  0|  0|  1| 126000.0|  18907.0|0.0|0.0|0.0|1.0|1.0|1.0|0.0|138.0| 4.0|  1|\n","|5021998|  0|  1|  0|  0|  1|  2|  90000.0|  18863.0|1.0|0.0|0.0|2.0|0.0|0.0|0.0|376.0| 0.0|  1|\n","+-------+---+---+---+---+---+---+---------+---------+---+---+---+---+---+---+---+-----+----+---+\n","only showing top 20 rows\n","\n"]}]},{"cell_type":"code","source":["df_joined.select([\"X1\", \"X2\", \"X3\", \"X4\", \"X5\", \"X6\", \"X7\", \"X8\", \"X9\", \"X10\", \"X12\", \"X13\", \"X14\", \"X15\", \"X16\", \"X17\"]).show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IJ3zLcUIDFvp","executionInfo":{"status":"ok","timestamp":1704756833579,"user_tz":360,"elapsed":865,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}},"outputId":"e90ae0b5-756e-4b46-8664-968905bee728"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["+---+---+---+---+---+---+---------+---------+---+---+---+---+---+---+-----+----+\n","| X1| X2| X3| X4| X5| X6|       X7|       X8| X9|X10|X12|X13|X14|X15|  X16| X17|\n","+---+---+---+---+---+---+---------+---------+---+---+---+---+---+---+-----+----+\n","|  0|  1|  0|  0|  0|  2| 180000.0|  18772.0|1.0|1.0|2.0|1.0|0.0|0.0|  0.0| 0.0|\n","|  0|  1|  1|  1|  0|  2| 315000.0|  13557.0|0.0|1.0|1.0|1.0|0.0|0.0|  1.0| 0.0|\n","|  0|  1|  1|  1|  0|  2| 315000.0|16040.342|0.0|1.0|1.0|1.0|0.0|0.0|  1.0| 0.0|\n","|  0|  1|  1|  1|  0|  2|191399.33|  13557.0|0.0|1.0|1.0|1.0|0.0|0.0|  1.0| 0.0|\n","|  0|  1|  1|  1|  0|  2| 315000.0|  13557.0|0.0|1.0|1.0|1.0|0.0|0.0|  1.0| 0.0|\n","|  0|  1|  1|  1|  0|  2| 315000.0|  13557.0|0.0|1.0|2.0|1.0|0.0|0.0|  1.0| 0.0|\n","|  0|  1|  1|  1|  0|  2| 315000.0|  13557.0|0.0|1.0|1.0|1.0|0.0|0.0|  1.0| 0.0|\n","|  0|  1|  0|  0|  0|  2| 180000.0|  22134.0|0.0|0.0|2.0|0.0|0.0|0.0|  0.0| 0.0|\n","|  1|  1|  0|  1|  1|  3| 450000.0|  18173.0|1.0|1.0|1.0|0.0|0.0|0.0| 17.0| 2.0|\n","|  1|  1|  0|  1|  1|  3| 450000.0|  18173.0|1.0|1.0|2.0|0.0|0.0|0.0| 17.0| 2.0|\n","|  1|  1|  0|  1|  1|  1| 450000.0|  18173.0|1.0|1.0|1.0|0.0|1.0|0.0| 17.0| 2.0|\n","|  0|  1|  1|  1|  0|  2|  90000.0|  18950.0|0.0|1.0|0.0|0.0|0.0|0.0| 21.0|11.0|\n","|  0|  1|  1|  1|  0|  2|191399.33|  18950.0|0.0|1.0|0.0|0.0|0.0|0.0| 21.0|11.0|\n","|  0|  1|  1|  1|  0|  2|  90000.0|  18950.0|0.0|1.0|0.0|0.0|0.0|0.0| 21.0|11.0|\n","|  1|  1|  0|  0|  1|  3| 472500.0|   8907.0|1.0|0.0|2.0|1.0|0.0|1.0|938.0| 0.0|\n","|  0|  1|  0|  0|  0|  2| 270000.0|  16896.0|1.0|0.0|0.0|0.0|0.0|0.0|141.0| 1.0|\n","|  0|  1|  0|  0|  0|  2| 270000.0|  16896.0|1.0|0.0|0.0|0.0|1.0|0.0|141.0| 1.0|\n","|  0|  1|  0|  0|  0|  1| 126000.0|  18907.0|0.0|0.0|1.0|1.0|1.0|0.0|138.0| 4.0|\n","|  0|  1|  0|  0|  0|  1| 126000.0|  18907.0|0.0|0.0|1.0|1.0|1.0|0.0|138.0| 4.0|\n","|  0|  1|  0|  0|  1|  2|  90000.0|  18863.0|1.0|0.0|2.0|0.0|0.0|0.0|376.0| 0.0|\n","+---+---+---+---+---+---+---------+---------+---+---+---+---+---+---+-----+----+\n","only showing top 20 rows\n","\n"]}]},{"cell_type":"code","source":["from pyspark.ml.feature import VectorAssembler\n","from pyspark.ml.feature import StandardScaler\n","from pyspark.ml import Pipeline\n","\n","#lista de columnas a ensamblar\n","columnas = [\"X1\", \"X2\", \"X3\", \"X4\", \"X5\", \"X6\", \"X7\", \"X8\", \"X9\", \"X10\", \"X12\", \"X13\", \"X14\", \"X15\", \"X16\", \"X17\"]\n","\n","\n","# Función de ensamblaje de características\n","def vector_assembler(df, input_cols, output_col=\"features\"):\n","    assembler = VectorAssembler(inputCols=input_cols, outputCol=output_col)\n","    assembled_df = assembler.transform(df)\n","    return assembled_df\n","\n","\n","assembled_df = vector_assembler(df_joined, input_cols=columnas)\n","\n","vector_df = assembled_df.select(['features', 'Y'])\n","\n","vector_df.show(truncate=False)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k9Y4UQGLHO4z","executionInfo":{"status":"ok","timestamp":1704756834898,"user_tz":360,"elapsed":1326,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}},"outputId":"4baac214-9923-42ae-a55d-fd9f92993cba"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["+----------------------------------------------------------------------------------+---+\n","|features                                                                          |Y  |\n","+----------------------------------------------------------------------------------+---+\n","|(16,[1,5,6,7,8,9,10,11],[1.0,2.0,180000.0,18772.0,1.0,1.0,2.0,1.0])               |1  |\n","|[0.0,1.0,1.0,1.0,0.0,2.0,315000.0,13557.0,0.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0]        |1  |\n","|[0.0,1.0,1.0,1.0,0.0,2.0,315000.0,16040.341796875,0.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0]|1  |\n","|[0.0,1.0,1.0,1.0,0.0,2.0,191399.328125,13557.0,0.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0]   |1  |\n","|[0.0,1.0,1.0,1.0,0.0,2.0,315000.0,13557.0,0.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0]        |1  |\n","|[0.0,1.0,1.0,1.0,0.0,2.0,315000.0,13557.0,0.0,1.0,2.0,1.0,0.0,0.0,1.0,0.0]        |1  |\n","|[0.0,1.0,1.0,1.0,0.0,2.0,315000.0,13557.0,0.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0]        |1  |\n","|(16,[1,5,6,7,10],[1.0,2.0,180000.0,22134.0,2.0])                                  |1  |\n","|[1.0,1.0,0.0,1.0,1.0,3.0,450000.0,18173.0,1.0,1.0,1.0,0.0,0.0,0.0,17.0,2.0]       |1  |\n","|[1.0,1.0,0.0,1.0,1.0,3.0,450000.0,18173.0,1.0,1.0,2.0,0.0,0.0,0.0,17.0,2.0]       |1  |\n","|[1.0,1.0,0.0,1.0,1.0,1.0,450000.0,18173.0,1.0,1.0,1.0,0.0,1.0,0.0,17.0,2.0]       |1  |\n","|(16,[1,2,3,5,6,7,9,14,15],[1.0,1.0,1.0,2.0,90000.0,18950.0,1.0,21.0,11.0])        |1  |\n","|(16,[1,2,3,5,6,7,9,14,15],[1.0,1.0,1.0,2.0,191399.328125,18950.0,1.0,21.0,11.0])  |1  |\n","|(16,[1,2,3,5,6,7,9,14,15],[1.0,1.0,1.0,2.0,90000.0,18950.0,1.0,21.0,11.0])        |1  |\n","|[1.0,1.0,0.0,0.0,1.0,3.0,472500.0,8907.0,1.0,0.0,2.0,1.0,0.0,1.0,938.0,0.0]       |1  |\n","|(16,[1,5,6,7,8,14,15],[1.0,2.0,270000.0,16896.0,1.0,141.0,1.0])                   |1  |\n","|(16,[1,5,6,7,8,12,14,15],[1.0,2.0,270000.0,16896.0,1.0,1.0,141.0,1.0])            |1  |\n","|(16,[1,5,6,7,10,11,12,14,15],[1.0,1.0,126000.0,18907.0,1.0,1.0,1.0,138.0,4.0])    |1  |\n","|(16,[1,5,6,7,10,11,12,14,15],[1.0,1.0,126000.0,18907.0,1.0,1.0,1.0,138.0,4.0])    |1  |\n","|(16,[1,4,5,6,7,8,10,14],[1.0,1.0,2.0,90000.0,18863.0,1.0,2.0,376.0])              |1  |\n","+----------------------------------------------------------------------------------+---+\n","only showing top 20 rows\n","\n"]}]},{"cell_type":"code","source":["from pyspark.ml.feature import StandardScaler\n","from pyspark.ml import Pipeline\n","\n","def scaler(df, input_col, output_col):\n","\n","    scaler = StandardScaler(inputCol=input_col, outputCol=output_col, withMean=True, withStd=True)\n","    pipeline = Pipeline(stages=[scaler])\n","    model = pipeline.fit(df)\n","    df_scalado = model.transform(df)\n","\n","    return df_scalado\n","\n","scaled_df = scaler(vector_df, input_col='features',output_col='scaled_features')\n","scaled_df.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hfl3Dc-iBopA","executionInfo":{"status":"ok","timestamp":1704756837424,"user_tz":360,"elapsed":2528,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}},"outputId":"9f03fcac-2f8e-4101-e24f-3dc9f416e212"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["+--------------------+---+--------------------+\n","|            features|  Y|     scaled_features|\n","+--------------------+---+--------------------+\n","|(16,[1,5,6,7,8,9,...|  1|[-0.5314733233858...|\n","|[0.0,1.0,1.0,1.0,...|  1|[-0.5314733233858...|\n","|[0.0,1.0,1.0,1.0,...|  1|[-0.5314733233858...|\n","|[0.0,1.0,1.0,1.0,...|  1|[-0.5314733233858...|\n","|[0.0,1.0,1.0,1.0,...|  1|[-0.5314733233858...|\n","|[0.0,1.0,1.0,1.0,...|  1|[-0.5314733233858...|\n","|[0.0,1.0,1.0,1.0,...|  1|[-0.5314733233858...|\n","|(16,[1,5,6,7,10],...|  1|[-0.5314733233858...|\n","|[1.0,1.0,0.0,1.0,...|  1|[0.75603951636578...|\n","|[1.0,1.0,0.0,1.0,...|  1|[0.75603951636578...|\n","|[1.0,1.0,0.0,1.0,...|  1|[0.75603951636578...|\n","|(16,[1,2,3,5,6,7,...|  1|[-0.5314733233858...|\n","|(16,[1,2,3,5,6,7,...|  1|[-0.5314733233858...|\n","|(16,[1,2,3,5,6,7,...|  1|[-0.5314733233858...|\n","|[1.0,1.0,0.0,0.0,...|  1|[0.75603951636578...|\n","|(16,[1,5,6,7,8,14...|  1|[-0.5314733233858...|\n","|(16,[1,5,6,7,8,12...|  1|[-0.5314733233858...|\n","|(16,[1,5,6,7,10,1...|  1|[-0.5314733233858...|\n","|(16,[1,5,6,7,10,1...|  1|[-0.5314733233858...|\n","|(16,[1,4,5,6,7,8,...|  1|[-0.5314733233858...|\n","+--------------------+---+--------------------+\n","only showing top 20 rows\n","\n"]}]},{"cell_type":"markdown","source":["Modelo de regresión logística"],"metadata":{"id":"qqBwBW9IQFYs"}},{"cell_type":"code","source":["from pyspark.sql import SparkSession\n","from pyspark.ml.tuning import ParamGridBuilder, CrossValidator\n","from pyspark.ml.evaluation import BinaryClassificationEvaluator\n","from pyspark.ml.classification import LogisticRegression\n","import numpy as np\n","\n","train_data, test_data = scaled_df.randomSplit([0.8, 0.2], seed=42)\n","\n","#modelo de regresión logística\n","LR = LogisticRegression(labelCol=\"Y\", featuresCol=\"scaled_features\", maxIter=100)\n","\n","#parámetros a probar\n","lr_param_grid = (ParamGridBuilder()\n","                 .addGrid(LR.regParam, [0.01, 0.1, 0.5, 1.0, 2.0])\n","                 .addGrid(LR.elasticNetParam, [0.0, 0.25, 0.5, 0.75, 1.0])\n","                 .build())\n","\n","#AUC como la métrica a evaluar\n","lr_evaluator = BinaryClassificationEvaluator(labelCol=\"Y\", metricName=\"areaUnderROC\")\n","\n","#validación cruzada con 10 folds\n","lr_cv = CrossValidator(estimator=LR,\n","                       estimatorParamMaps=lr_param_grid,\n","                       evaluator=lr_evaluator,\n","                       numFolds=10)\n","\n","#validaciones cruzadas\n","lr_cv_model = lr_cv.fit(train_data)\n","\n","#mejor modelo ajustado\n","best_LR_model = lr_cv_model.bestModel\n","\n","lr_predictions = best_LR_model.transform(test_data)\n","\n","#precisión de predicción del modelo elegido\n","evaluation_LR = lr_evaluator.evaluate(lr_predictions)\n","print(\"Precisión del mejor modelo: \", np.round(evaluation_LR, 4))\n","\n","#label y la probabilidad de predicción\n","lr_predictions.select(\"Y\", \"prediction\", \"probability\").show()\n","\n","lr_parameter_score = pd.DataFrame(np.round(lr_cv_model.avgMetrics, 4), columns=[\"AUC_mean\"]).reset_index(drop=False)\n","\n","parameters_auc_df = pd.DataFrame(list(enumerate(lr_cv_model.getEstimatorParamMaps()))).rename(columns={0: \"index\", 1: \"Parámetros\"})\n","parameters_auc_df = parameters_auc_df.join(lr_parameter_score.rename(columns={\"index\": \"Modelo\"}), on=\"index\").sort_values(\"AUC_mean\", ascending=False)\n","\n","#resultados de cada AUC\n","print(\"Resultados de AUC para cada modelo:\")\n","print(parameters_auc_df[[\"Modelo\", \"Parámetros\", \"AUC_mean\"]].to_string(index=False))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VNU9uOf65wjV","executionInfo":{"status":"ok","timestamp":1704757179252,"user_tz":360,"elapsed":341831,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}},"outputId":"e09765a8-8532-4d1d-d4ce-0d56cb2135ee"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Precisión del mejor modelo:  0.6823\n","+---+----------+--------------------+\n","|  Y|prediction|         probability|\n","+---+----------+--------------------+\n","|  1|       0.0|[0.91451384340581...|\n","|  0|       0.0|[0.96123197427197...|\n","|  0|       0.0|[0.92987367109496...|\n","|  0|       0.0|[0.95093679255617...|\n","|  1|       0.0|[0.86230336493467...|\n","|  0|       0.0|[0.94830094054701...|\n","|  0|       0.0|[0.94484797308303...|\n","|  0|       0.0|[0.85926703480118...|\n","|  0|       0.0|[0.89690388152088...|\n","|  0|       0.0|[0.89690388152088...|\n","|  0|       0.0|[0.92289260952559...|\n","|  0|       0.0|[0.92190715543858...|\n","|  0|       0.0|[0.79517989044007...|\n","|  0|       0.0|[0.78615545989653...|\n","|  0|       0.0|[0.94129842042555...|\n","|  0|       0.0|[0.95944108973814...|\n","|  0|       0.0|[0.91328583986591...|\n","|  0|       0.0|[0.94371123754769...|\n","|  0|       0.0|[0.84561160717125...|\n","|  0|       0.0|[0.95374059025639...|\n","+---+----------+--------------------+\n","only showing top 20 rows\n","\n","Resultados de AUC para cada modelo:\n"," Modelo                                                                                                Parámetros  AUC_mean\n","      0  {LogisticRegression_b5f58724dce2__regParam: 0.01, LogisticRegression_b5f58724dce2__elasticNetParam: 0.0}    0.6537\n","      6  {LogisticRegression_b5f58724dce2__regParam: 0.1, LogisticRegression_b5f58724dce2__elasticNetParam: 0.25}    0.6512\n","      1 {LogisticRegression_b5f58724dce2__regParam: 0.01, LogisticRegression_b5f58724dce2__elasticNetParam: 0.25}    0.6495\n","      3 {LogisticRegression_b5f58724dce2__regParam: 0.01, LogisticRegression_b5f58724dce2__elasticNetParam: 0.75}    0.6489\n","      2  {LogisticRegression_b5f58724dce2__regParam: 0.01, LogisticRegression_b5f58724dce2__elasticNetParam: 0.5}    0.6485\n","      4  {LogisticRegression_b5f58724dce2__regParam: 0.01, LogisticRegression_b5f58724dce2__elasticNetParam: 1.0}    0.6461\n","      5   {LogisticRegression_b5f58724dce2__regParam: 0.1, LogisticRegression_b5f58724dce2__elasticNetParam: 0.0}    0.6441\n","     10   {LogisticRegression_b5f58724dce2__regParam: 0.5, LogisticRegression_b5f58724dce2__elasticNetParam: 0.0}    0.6343\n","     15   {LogisticRegression_b5f58724dce2__regParam: 1.0, LogisticRegression_b5f58724dce2__elasticNetParam: 0.0}    0.6318\n","     20   {LogisticRegression_b5f58724dce2__regParam: 2.0, LogisticRegression_b5f58724dce2__elasticNetParam: 0.0}    0.6307\n","      7   {LogisticRegression_b5f58724dce2__regParam: 0.1, LogisticRegression_b5f58724dce2__elasticNetParam: 0.5}    0.5828\n","     19   {LogisticRegression_b5f58724dce2__regParam: 1.0, LogisticRegression_b5f58724dce2__elasticNetParam: 1.0}    0.5000\n","     23  {LogisticRegression_b5f58724dce2__regParam: 2.0, LogisticRegression_b5f58724dce2__elasticNetParam: 0.75}    0.5000\n","     21  {LogisticRegression_b5f58724dce2__regParam: 2.0, LogisticRegression_b5f58724dce2__elasticNetParam: 0.25}    0.5000\n","     22   {LogisticRegression_b5f58724dce2__regParam: 2.0, LogisticRegression_b5f58724dce2__elasticNetParam: 0.5}    0.5000\n","     17   {LogisticRegression_b5f58724dce2__regParam: 1.0, LogisticRegression_b5f58724dce2__elasticNetParam: 0.5}    0.5000\n","     18  {LogisticRegression_b5f58724dce2__regParam: 1.0, LogisticRegression_b5f58724dce2__elasticNetParam: 0.75}    0.5000\n","     12   {LogisticRegression_b5f58724dce2__regParam: 0.5, LogisticRegression_b5f58724dce2__elasticNetParam: 0.5}    0.5000\n","     16  {LogisticRegression_b5f58724dce2__regParam: 1.0, LogisticRegression_b5f58724dce2__elasticNetParam: 0.25}    0.5000\n","     14   {LogisticRegression_b5f58724dce2__regParam: 0.5, LogisticRegression_b5f58724dce2__elasticNetParam: 1.0}    0.5000\n","     13  {LogisticRegression_b5f58724dce2__regParam: 0.5, LogisticRegression_b5f58724dce2__elasticNetParam: 0.75}    0.5000\n","     11  {LogisticRegression_b5f58724dce2__regParam: 0.5, LogisticRegression_b5f58724dce2__elasticNetParam: 0.25}    0.5000\n","      9   {LogisticRegression_b5f58724dce2__regParam: 0.1, LogisticRegression_b5f58724dce2__elasticNetParam: 1.0}    0.5000\n","      8  {LogisticRegression_b5f58724dce2__regParam: 0.1, LogisticRegression_b5f58724dce2__elasticNetParam: 0.75}    0.5000\n","     24   {LogisticRegression_b5f58724dce2__regParam: 2.0, LogisticRegression_b5f58724dce2__elasticNetParam: 1.0}    0.5000\n"]}]},{"cell_type":"markdown","source":["Modelo Random Forest"],"metadata":{"id":"VRqDRHIjTO68"}},{"cell_type":"code","source":["from pyspark.ml.classification import RandomForestClassifier\n","from pyspark.ml.evaluation import BinaryClassificationEvaluator\n","from pyspark.ml.tuning import ParamGridBuilder, CrossValidator\n","from pyspark.ml import Pipeline\n","\n","#modelo Random Forest\n","rf = RandomForestClassifier(labelCol=\"Y\", featuresCol=\"scaled_features\")\n","\n","#AUC como métrica de evaluación\n","rfevaluator = BinaryClassificationEvaluator(labelCol=\"Y\", metricName=\"areaUnderROC\")\n","\n","#parámetros a probar\n","rfparamGrid = (ParamGridBuilder()\n","               .addGrid(rf.maxDepth, [2, 5, 7, 10, 12])\n","               .addGrid(rf.numTrees, [5, 10, 15, 20, 50])\n","               .build())\n","\n","#validación cruzada de 10 folds\n","rfcv = CrossValidator(estimator=rf,\n","                      estimatorParamMaps=rfparamGrid,\n","                      evaluator=rfevaluator,\n","                      numFolds=10)\n","\n","#validaciones cruzadas\n","rfcvModel = rfcv.fit(train_data)\n","\n","#parámetros de los modelos\n","parametros_RF = [\"depth 2 & trees 5\", \"depth 2 & trees 10\", \"depth 2 & trees 15\", \"depth 2 & trees 20\", \"depth 2 & trees 50\",\n","                  \"depth 5 & trees 5\", \"depth 5 & trees 10\", \"depth 5 & trees 15\", \"depth 5 & trees 20\", \"depth 5 & trees 50\",\n","                  \"depth 7 & trees 5\", \"depth 7 & trees 10\", \"depth 7 & trees 15\", \"depth 7 & trees 20\", \"depth 7 & trees 50\",\n","                  \"depth 10 & trees 5\", \"depth 10 & trees 10\", \"depth 10 & trees 15\", \"depth 10 & trees 20\", \"depth 10 & trees 50\",\n","                  \"depth 12 & trees 5\", \"depth 12 & trees 10\", \"depth 12 & trees 15\", \"depth 12 & trees 20\", \"depth 12 & trees 50\"]\n","\n","#join de los parámetros de los modelos con el promedio del AUC\n","parametros_RF_df = pd.DataFrame({\"Modelo\": [f\"Modelo {i+1}\" for i in range(len(parametros_RF))], \"Parámetros\": parametros_RF})\n","RF_auc = pd.DataFrame(np.round(rfcvModel.avgMetrics, 4), columns=[\"AUC\"])\n","parameters_auc_RF_df = pd.concat([parametros_RF_df, RF_auc], axis=1).sort_values(\"AUC\", ascending=False)\n","\n","print(parameters_auc_RF_df)\n","\n","#modelo ganador y se utilizan sus parámetros para entrenar el modelo que será probado después\n","best_model_params = parameters_auc_RF_df.iloc[0]\n","depth_and_trees = best_model_params[\"Parámetros\"].split(\" & \")\n","best_depth = int(depth_and_trees[0].split(\" \")[-1])\n","best_trees = int(depth_and_trees[1].split(\" \")[-1])\n","rf_best_model = RandomForestClassifier(labelCol=\"Y\", featuresCol=\"scaled_features\", maxDepth=best_depth, numTrees=best_trees)\n","rfModel = rf_best_model.fit(train_data)\n","\n","rf_predictions = rfModel.transform(test_data)\n","\n","#precision del mejor modelo\n","rf_evaluation = rfevaluator.evaluate(rf_predictions, {rfevaluator.metricName: 'areaUnderROC'})\n","print(\"Precisión del mejor modelo: {}\".format(rf_evaluation))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RW1iUNumQTCh","executionInfo":{"status":"ok","timestamp":1704758577276,"user_tz":360,"elapsed":393235,"user":{"displayName":"Gabriel Valentine","userId":"12394259087128045623"}},"outputId":"db8e8dd2-8dbb-4845-fc28-d11337d75445"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["       Modelo           Parámetros     AUC\n","23  Modelo 24  depth 12 & trees 20  0.7693\n","24  Modelo 25  depth 12 & trees 50  0.7613\n","19  Modelo 20  depth 10 & trees 50  0.7604\n","18  Modelo 19  depth 10 & trees 20  0.7586\n","21  Modelo 22  depth 12 & trees 10  0.7458\n","16  Modelo 17  depth 10 & trees 10  0.7449\n","13  Modelo 14   depth 7 & trees 20  0.7387\n","22  Modelo 23  depth 12 & trees 15  0.7381\n","14  Modelo 15   depth 7 & trees 50  0.7374\n","17  Modelo 18  depth 10 & trees 15  0.7346\n","9   Modelo 10   depth 5 & trees 50  0.7272\n","11  Modelo 12   depth 7 & trees 10  0.7230\n","20  Modelo 21   depth 12 & trees 5  0.7204\n","15  Modelo 16   depth 10 & trees 5  0.7134\n","12  Modelo 13   depth 7 & trees 15  0.7004\n","7    Modelo 8   depth 5 & trees 15  0.6948\n","8    Modelo 9   depth 5 & trees 20  0.6941\n","6    Modelo 7   depth 5 & trees 10  0.6938\n","4    Modelo 5   depth 2 & trees 50  0.6935\n","10  Modelo 11    depth 7 & trees 5  0.6912\n","5    Modelo 6    depth 5 & trees 5  0.6899\n","1    Modelo 2   depth 2 & trees 10  0.6309\n","3    Modelo 4   depth 2 & trees 20  0.6112\n","2    Modelo 3   depth 2 & trees 15  0.5994\n","0    Modelo 1    depth 2 & trees 5  0.5791\n","Precisión del mejor modelo: 0.7612619222303741\n"]}]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPOpOsm7O2wFf8kkMxFUtWA"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}